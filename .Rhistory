oo
})
})
htmlwidgets::saveWidget(thing, "InfectionTypeDistribution_Granular2.html", selfcontained = TRUE)
}, error = function(e){
print("was not able to run the additional granular generating html code")
})
thing
udg <- unique(filled_data$groups)
options <- list()
zones <- sort(na.omit(unique(filled_data$zone)))
pie <- list(type='pie', name='group',
center= c('77%', '30%'), radius= '24%',
label= list(show=T), labelLine= list(length=6, length2=0))
df <- filled_data |> count(zone, groups, dates, values) |>
mutate(colr= colors[match(groups, udg)])
zz <- unique(df$zone)
iz <- 1
print("Original data names for df are")
print(names(df))
#Try thing for granular 2 plot
result<-tryCatch({
max_y<-max((filled_data%>% group_by(zone,dates) %>% summarize(no = sum(values)))$no)
thing<-filled_data |> group_by(zone) |> ec.init( color=colors,
yAxis = list(max=max_y),
tooltip= list(s=T), xAxis= list(type='category'),
emphasis= list(focus= 'series',
itemStyle= list(shadowBlur=10, shadowColor='rgba(0,0,0,0.5)'),
label= list(position= 'right', rotate = 350, show=T)),
dataZoom= list(type= 'slider', orient= 'vertical', left= '2%'),
title= list(text = "Infection pathway analytics",
left= "10%", top= 10, textStyle= list(fontSize = 20)),
timeline= list(axisType= 'category'),
series.param= list(type= 'bar', stack='grp',
encode= list(x='dates', y='values'), groupBy= 'groups' )
)  |>
ec.upd({
options <- lapply(options, \(oo) {  # by zone
# serie name has been preset to 'groups' column
oo$series <- lapply(oo$series, \(ss) {
ss$itemStyle= list(color= colors[match(ss$name, udg)])
ss
})
tmp <- df |> filter(zone==zz[iz]) |> group_by(groups,colr) |>
summarize(value= sum(values)) |> rename(name= groups)
tmp <- ec.data(tmp, 'names')   # convert data.frame to list
tmp <- lapply(tmp, \(rr) {     # change colr to itemStyle
rr$itemStyle <- list(color= rr$colr); rr$colr <- NULL; rr
})
pie$data <- lsetting$data <- tmp    # same colors for legend and pie
oo$legend <- lsetting
oo$series <- append(oo$series, list(pie))
iz <<- iz+1
oo
})
})
htmlwidgets::saveWidget(thing, "InfectionTypeDistribution_Granular2.html", selfcontained = TRUE)
}, error = function(e){
print("was not able to run the additional granular generating html code")
})
thing
mean(2,3)
mean(2,34)
mean(c(2,3))
mean(c(2.7,3.03,5.55,2.38,2.667,1.282,3.57,0.877))
library(ggplot2)
library(pandoc)
library(plotly)
library(echarts4r)
library(echarty)
library(echarts4r.assets)
# library(echarty)
library("ggplot2")
library("plotly")
library("breakDown")
library(dplyr)
library(ggdark)
library(pracma)
library(comprehenr)
library(ggridges)
library(tidyverse)
library(ggplot2)
library(plotly)
library(thematic)
library(extrafont)
library(pandoc)
setwd("E:/Outbreak_CIC_Model/")
data<-read.csv("output.csv",header = FALSE)
colnames(data) <- c(
"ContaminantPct1","TotalSamples1_","ContaminantSamples1",
"HitPct1", "TotalSamples1", "HitSamples1",
"HitPct2", "TotalSamples2", "HitSamples2","HitPct3","HitSamples3","HitPct4", "TotalSamples4", "HitSamples4","Zone"
)
#Round up values
data$ContaminantSamples1<-ceiling(data$ContaminantSamples1) #Contaminated Hosts
data$HitSamples1<-ceiling(data$HitSamples1) #Infected Hosts
data$HitSamples2<-ceiling(data$HitSamples2) #Eggs
data$HitSamples3<-ceiling(data$HitSamples3) #Colonized Hosts
data$HitSamples4<-ceiling(data$HitSamples4) #Faeces
# Scatter plot for the first 2 sets of data
# Define custom theme colors
thematic_on(bg = "#FCE9D7", fg = "orange", accent = "purple",font = "Yu Gothic")
# Create a unique identifier for each time unit
no_of_zones<-length(unique(data$Zone))
data$TimeUnit <- rep(seq_len(nrow(data) / no_of_zones), each = no_of_zones)
#Echarty impl
library(reshape)
library(echarty)
names(data)
names(data)<-c("%Contaminated","Total Hosts","No contaminated",
"%Infected","Total Hosts(repeated)","No infected",
"%Eggs Infected","Eggs Amt","Eggs Amt Infected",
"%Colonized","No Colonized","%Faeces infected",
"Faeces Amt","Faeces Amt Infected","Zone","TimeUnit")
df<-melt(data,c("Total Hosts","No contaminated","Total Hosts(repeated)","No infected","Eggs Amt","Eggs Amt Infected",
"No Colonized","Faeces Amt","Faeces Amt Infected","TimeUnit","Zone"))
setting <- list(show = T,type= "scroll",orient= "horizontal", pageButtonPosition= 'start',
right= "30%",top = 30,width = 470, icon = 'circle', align= 'left', height='85%')
tmp <- df |> group_by(Zone) |> group_split()
cns <- lapply(seq_along(tmp), \(i) { as.list(unique(tmp[[i]]$variable)) })
hosts<-max((df$`Total Hosts`))
eggs<-max(df$`Eggs Amt`)
faeces<-max(df$`Faeces Amt`)
out<-df %>% mutate(value = round((value),1))%>%
group_by(Zone) |>
ec.init(
title= list(text= 'Temporal Trends: Contamination/Infection/Colonization Rates Across Hosts, Eggs, and Faeces '),
xAxis = list(name = 'Time',nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder'),
axisLabel = list(rotate = 346,width = 65,
overflow = 'truncate')),
yAxis = list(max = 100,name = "% compromised",nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder')),
dataZoom= list(list(type= 'slider',orient = 'vertical'
,left = '2%'),list(type= 'slider',orient = 'horizontal'
,right = '2%',top='1%', width = '20%')),
tl.series = list(type  ='line',
encode = list(x = 'TimeUnit',y = 'value'), groupBy= 'variable',
symbolSize = ec.clmn(sprintf("function(v, pp) {
var minVal = 0;
var maxsize = 25;
if (['%%Contaminated', '%%Infected', '%%Colonized'].includes(pp.seriesName))
return (pp.data[2] - minVal) / (%f - minVal) *maxsize;
else if (['%%Eggs Infected'].includes(pp.seriesName))
return (pp.data[4] - minVal) / (%f - minVal) * maxsize;
else if (['%%Faeces infected'].includes(pp.seriesName))
return (pp.data[7] - minVal) / (%f - minVal) * maxsize;
else
return 90;
}",hosts,eggs,faeces)),
emphasis= list(focus= 'series',
itemStyle=list(shadowBlur=10,
shadowColor='rgba(0,0,0,0.5)'),
label= list(position= 'right',
rotate = 350,
show=TRUE))),
tooltip = list(show = T, trigger = 'axis'))|>
ec.upd({legend<-setting
options <- lapply(seq_along(options), \(i) {
tita<-title
tita$text <- paste(tita$text, options[[i]]$title$text)
options[[i]]$title <- tita   # here we set a title for each timeline step
options[[i]]$legend$data <- cns[[i]]  # fine-tune legends: data by continent
options[[i]]
})
}) |> ec.theme("thing",westeros)
out
source('echarty_themes.R')
out<-df %>% mutate(value = round((value),1))%>%
group_by(Zone) |>
ec.init(
title= list(text= 'Temporal Trends: Contamination/Infection/Colonization Rates Across Hosts, Eggs, and Faeces '),
xAxis = list(name = 'Time',nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder'),
axisLabel = list(rotate = 346,width = 65,
overflow = 'truncate')),
yAxis = list(max = 100,name = "% compromised",nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder')),
dataZoom= list(list(type= 'slider',orient = 'vertical'
,left = '2%'),list(type= 'slider',orient = 'horizontal'
,right = '2%',top='1%', width = '20%')),
tl.series = list(type  ='line',
encode = list(x = 'TimeUnit',y = 'value'), groupBy= 'variable',
symbolSize = ec.clmn(sprintf("function(v, pp) {
var minVal = 0;
var maxsize = 25;
if (['%%Contaminated', '%%Infected', '%%Colonized'].includes(pp.seriesName))
return (pp.data[2] - minVal) / (%f - minVal) *maxsize;
else if (['%%Eggs Infected'].includes(pp.seriesName))
return (pp.data[4] - minVal) / (%f - minVal) * maxsize;
else if (['%%Faeces infected'].includes(pp.seriesName))
return (pp.data[7] - minVal) / (%f - minVal) * maxsize;
else
return 90;
}",hosts,eggs,faeces)),
emphasis= list(focus= 'series',
itemStyle=list(shadowBlur=10,
shadowColor='rgba(0,0,0,0.5)'),
label= list(position= 'right',
rotate = 350,
show=TRUE))),
tooltip = list(show = T, trigger = 'axis'))|>
ec.upd({legend<-setting
options <- lapply(seq_along(options), \(i) {
tita<-title
tita$text <- paste(tita$text, options[[i]]$title$text)
options[[i]]$title <- tita   # here we set a title for each timeline step
options[[i]]$legend$data <- cns[[i]]  # fine-tune legends: data by continent
options[[i]]
})
}) |> ec.theme("thing",westeros)
out
out<-df %>% mutate(value = round((value),1))%>%
group_by(Zone) |>
ec.init(
title= list(text= 'Temporal Trends: Contamination/Infection/Colonization Rates Across Hosts, Eggs, and Faeces '),
xAxis = list(name = 'Time',nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder'),
axisLabel = list(rotate = 346,width = 65,
overflow = 'truncate')),
yAxis = list(max = 100,name = "% compromised",nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder'), end = 20),
dataZoom= list(list(type= 'slider',orient = 'vertical'
,left = '2%'),list(type= 'slider',orient = 'horizontal'
,right = '2%',top='1%', width = '20%')),
tl.series = list(type  ='line',
encode = list(x = 'TimeUnit',y = 'value'), groupBy= 'variable',
symbolSize = ec.clmn(sprintf("function(v, pp) {
var minVal = 0;
var maxsize = 25;
if (['%%Contaminated', '%%Infected', '%%Colonized'].includes(pp.seriesName))
return (pp.data[2] - minVal) / (%f - minVal) *maxsize;
else if (['%%Eggs Infected'].includes(pp.seriesName))
return (pp.data[4] - minVal) / (%f - minVal) * maxsize;
else if (['%%Faeces infected'].includes(pp.seriesName))
return (pp.data[7] - minVal) / (%f - minVal) * maxsize;
else
return 90;
}",hosts,eggs,faeces)),
emphasis= list(focus= 'series',
itemStyle=list(shadowBlur=10,
shadowColor='rgba(0,0,0,0.5)'),
label= list(position= 'right',
rotate = 350,
show=TRUE))),
tooltip = list(show = T, trigger = 'axis'))|>
ec.upd({legend<-setting
options <- lapply(seq_along(options), \(i) {
tita<-title
tita$text <- paste(tita$text, options[[i]]$title$text)
options[[i]]$title <- tita   # here we set a title for each timeline step
options[[i]]$legend$data <- cns[[i]]  # fine-tune legends: data by continent
options[[i]]
})
}) |> ec.theme("thing",westeros)
out
out<-df %>% mutate(value = round((value),1))%>%
group_by(Zone) |>
ec.init(
title= list(text= 'Temporal Trends: Contamination/Infection/Colonization Rates Across Hosts, Eggs, and Faeces '),
xAxis = list(name = 'Time',nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder'),
axisLabel = list(rotate = 346,width = 65,
overflow = 'truncate')),
yAxis = list(max = 100,name = "% compromised",nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder')),
dataZoom= list(list(type= 'slider',orient = 'vertical'
,left = '2%'),list(type= 'slider',orient = 'horizontal'
,right = '2%',end = 20,top='1%', width = '20%')),
tl.series = list(type  ='line',
encode = list(x = 'TimeUnit',y = 'value'), groupBy= 'variable',
symbolSize = ec.clmn(sprintf("function(v, pp) {
var minVal = 0;
var maxsize = 25;
if (['%%Contaminated', '%%Infected', '%%Colonized'].includes(pp.seriesName))
return (pp.data[2] - minVal) / (%f - minVal) *maxsize;
else if (['%%Eggs Infected'].includes(pp.seriesName))
return (pp.data[4] - minVal) / (%f - minVal) * maxsize;
else if (['%%Faeces infected'].includes(pp.seriesName))
return (pp.data[7] - minVal) / (%f - minVal) * maxsize;
else
return 90;
}",hosts,eggs,faeces)),
emphasis= list(focus= 'series',
itemStyle=list(shadowBlur=10,
shadowColor='rgba(0,0,0,0.5)'),
label= list(position= 'right',
rotate = 350,
show=TRUE))),
tooltip = list(show = T, trigger = 'axis'))|>
ec.upd({legend<-setting
options <- lapply(seq_along(options), \(i) {
tita<-title
tita$text <- paste(tita$text, options[[i]]$title$text)
options[[i]]$title <- tita   # here we set a title for each timeline step
options[[i]]$legend$data <- cns[[i]]  # fine-tune legends: data by continent
options[[i]]
})
}) |> ec.theme("thing",westeros)
out
out<-df %>% mutate(value = round((value),1))%>%
group_by(Zone) |>
ec.init(
title= list(text= 'Temporal Trends: Contamination/Infection/Colonization Rates Across Hosts, Eggs, and Faeces '),
xAxis = list(name = 'Time',nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder'),
axisLabel = list(rotate = 346,width = 65,
overflow = 'truncate')),
yAxis = list(max = 100,name = "% compromised",nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder')),
dataZoom= list(list(type= 'slider',orient = 'vertical'
,left = '2%'),list(type= 'slider',orient = 'horizontal'
,right = '2%',top='1%', width = '20%')),
tl.series = list(type  ='line',
encode = list(x = 'TimeUnit',y = 'value'), groupBy= 'variable',
symbolSize = ec.clmn(sprintf("function(v, pp) {
var minVal = 0;
var maxsize = 25;
if (['%%Contaminated', '%%Infected', '%%Colonized'].includes(pp.seriesName))
return (pp.data[2] - minVal) / (%f - minVal) *maxsize;
else if (['%%Eggs Infected'].includes(pp.seriesName))
return (pp.data[4] - minVal) / (%f - minVal) * maxsize;
else if (['%%Faeces infected'].includes(pp.seriesName))
return (pp.data[7] - minVal) / (%f - minVal) * maxsize;
else
return 90;
}",hosts,eggs,faeces)),
emphasis= list(focus= 'series',
itemStyle=list(shadowBlur=10,
shadowColor='rgba(0,0,0,0.5)'),
label= list(position= 'right',
rotate = 350,
show=TRUE))),
tooltip = list(show = T, trigger = 'axis'))|>
ec.upd({legend<-setting
options <- lapply(seq_along(options), \(i) {
tita<-title
tita$text <- paste(tita$text, options[[i]]$title$text)
options[[i]]$title <- tita   # here we set a title for each timeline step
options[[i]]$legend$data <- cns[[i]]  # fine-tune legends: data by continent
options[[i]]
})
}) |> ec.theme("thing",westeros)
out
out<-df %>% mutate(value = round((value),1))%>%
group_by(Zone) |>
ec.init(
title= list(text= 'Temporal Trends: Contamination/Infection/Colonization Rates Across Hosts, Eggs, and Faeces '),
xAxis = list(name = 'Time',nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder'),
axisLabel = list(rotate = 346,width = 65,
overflow = 'truncate')),
yAxis = list(max = 100,name = "% compromised",nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder')),
dataZoom= list(list(end = 20,type= 'slider',orient = 'vertical'
,left = '2%'),list(type= 'slider',orient = 'horizontal'
,right = '2%',top='1%', width = '20%')),
tl.series = list(type  ='line',
encode = list(x = 'TimeUnit',y = 'value'), groupBy= 'variable',
symbolSize = ec.clmn(sprintf("function(v, pp) {
var minVal = 0;
var maxsize = 25;
if (['%%Contaminated', '%%Infected', '%%Colonized'].includes(pp.seriesName))
return (pp.data[2] - minVal) / (%f - minVal) *maxsize;
else if (['%%Eggs Infected'].includes(pp.seriesName))
return (pp.data[4] - minVal) / (%f - minVal) * maxsize;
else if (['%%Faeces infected'].includes(pp.seriesName))
return (pp.data[7] - minVal) / (%f - minVal) * maxsize;
else
return 90;
}",hosts,eggs,faeces)),
emphasis= list(focus= 'series',
itemStyle=list(shadowBlur=10,
shadowColor='rgba(0,0,0,0.5)'),
label= list(position= 'right',
rotate = 350,
show=TRUE))),
tooltip = list(show = T, trigger = 'axis'))|>
ec.upd({legend<-setting
options <- lapply(seq_along(options), \(i) {
tita<-title
tita$text <- paste(tita$text, options[[i]]$title$text)
options[[i]]$title <- tita   # here we set a title for each timeline step
options[[i]]$legend$data <- cns[[i]]  # fine-tune legends: data by continent
options[[i]]
})
}) |> ec.theme("thing",westeros)
out
out<-df %>% mutate(value = round((value),1))%>%
group_by(Zone) |>
ec.init(
title= list(text= 'Temporal Trends: Contamination/Infection/Colonization Rates Across Hosts, Eggs, and Faeces '),
xAxis = list(name = 'Time',nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder'),
axisLabel = list(rotate = 346,width = 65,
overflow = 'truncate')),
yAxis = list(max = 100,name = "% compromised",nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder')),
dataZoom= list(list(end = 10,type= 'slider',orient = 'vertical'
,left = '2%'),list(type= 'slider',orient = 'horizontal'
,right = '2%',top='1%', width = '20%')),
tl.series = list(type  ='line',
encode = list(x = 'TimeUnit',y = 'value'), groupBy= 'variable',
symbolSize = ec.clmn(sprintf("function(v, pp) {
var minVal = 0;
var maxsize = 25;
if (['%%Contaminated', '%%Infected', '%%Colonized'].includes(pp.seriesName))
return (pp.data[2] - minVal) / (%f - minVal) *maxsize;
else if (['%%Eggs Infected'].includes(pp.seriesName))
return (pp.data[4] - minVal) / (%f - minVal) * maxsize;
else if (['%%Faeces infected'].includes(pp.seriesName))
return (pp.data[7] - minVal) / (%f - minVal) * maxsize;
else
return 90;
}",hosts,eggs,faeces)),
emphasis= list(focus= 'series',
itemStyle=list(shadowBlur=10,
shadowColor='rgba(0,0,0,0.5)'),
label= list(position= 'right',
rotate = 350,
show=TRUE))),
tooltip = list(show = T, trigger = 'axis'))|>
ec.upd({legend<-setting
options <- lapply(seq_along(options), \(i) {
tita<-title
tita$text <- paste(tita$text, options[[i]]$title$text)
options[[i]]$title <- tita   # here we set a title for each timeline step
options[[i]]$legend$data <- cns[[i]]  # fine-tune legends: data by continent
options[[i]]
})
}) |> ec.theme("thing",westeros)
out
data<-read.csv("output.csv",header = FALSE)
colnames(data) <- c(
"ContaminantPct1","TotalSamples1_","ContaminantSamples1",
"HitPct1", "TotalSamples1", "HitSamples1",
"HitPct2", "TotalSamples2", "HitSamples2","HitPct3","HitSamples3","HitPct4", "TotalSamples4", "HitSamples4","Zone"
)
#Round up values
data$ContaminantSamples1<-ceiling(data$ContaminantSamples1) #Contaminated Hosts
data$HitSamples1<-ceiling(data$HitSamples1) #Infected Hosts
data$HitSamples2<-ceiling(data$HitSamples2) #Eggs
data$HitSamples3<-ceiling(data$HitSamples3) #Colonized Hosts
data$HitSamples4<-ceiling(data$HitSamples4) #Faeces
# Scatter plot for the first 2 sets of data
# Define custom theme colors
thematic_on(bg = "#FCE9D7", fg = "orange", accent = "purple",font = "Yu Gothic")
# Create a unique identifier for each time unit
no_of_zones<-length(unique(data$Zone))
data$TimeUnit <- rep(seq_len(nrow(data) / no_of_zones), each = no_of_zones)
#Echarty impl
library(reshape)
library(echarty)
names(data)
names(data)<-c("%Contaminated","Total Hosts","No contaminated",
"%Infected","Total Hosts(repeated)","No infected",
"%Eggs Infected","Eggs Amt","Eggs Amt Infected",
"%Colonized","No Colonized","%Faeces infected",
"Faeces Amt","Faeces Amt Infected","Zone","TimeUnit")
df<-melt(data,c("Total Hosts","No contaminated","Total Hosts(repeated)","No infected","Eggs Amt","Eggs Amt Infected",
"No Colonized","Faeces Amt","Faeces Amt Infected","TimeUnit","Zone"))
setting <- list(show = T,type= "scroll",orient= "horizontal", pageButtonPosition= 'start',
right= "30%",top = 30,width = 470, icon = 'circle', align= 'left', height='85%')
tmp <- df |> group_by(Zone) |> group_split()
cns <- lapply(seq_along(tmp), \(i) { as.list(unique(tmp[[i]]$variable)) })
hosts<-max((df$`Total Hosts`))
eggs<-max(df$`Eggs Amt`)
faeces<-max(df$`Faeces Amt`)
out<-df %>% mutate(value = round((value),4))%>%
group_by(Zone) |>
ec.init(
title= list(text= 'Temporal Trends: Contamination/Infection/Colonization Rates Across Hosts, Eggs, and Faeces '),
xAxis = list(name = 'Time',nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder'),
axisLabel = list(rotate = 346,width = 65,
overflow = 'truncate')),
yAxis = list(max = 100,name = "% compromised",nameLocation = 'start',
nameTextStyle = list(fontWeight ='bolder')),
dataZoom= list(list(end = 10,type= 'slider',orient = 'vertical'
,left = '2%'),list(type= 'slider',orient = 'horizontal'
,right = '2%',top='1%', width = '20%')),
tl.series = list(type  ='line',
encode = list(x = 'TimeUnit',y = 'value'), groupBy= 'variable',
symbolSize = ec.clmn(sprintf("function(v, pp) {
var minVal = 0;
var maxsize = 25;
if (['%%Contaminated', '%%Infected', '%%Colonized'].includes(pp.seriesName))
return (pp.data[2] - minVal) / (%f - minVal) *maxsize;
else if (['%%Eggs Infected'].includes(pp.seriesName))
return (pp.data[4] - minVal) / (%f - minVal) * maxsize;
else if (['%%Faeces infected'].includes(pp.seriesName))
return (pp.data[7] - minVal) / (%f - minVal) * maxsize;
else
return 90;
}",hosts,eggs,faeces)),
emphasis= list(focus= 'series',
itemStyle=list(shadowBlur=10,
shadowColor='rgba(0,0,0,0.5)'),
label= list(position= 'right',
rotate = 350,
show=TRUE))),
tooltip = list(show = T, trigger = 'axis'))|>
ec.upd({legend<-setting
options <- lapply(seq_along(options), \(i) {
tita<-title
tita$text <- paste(tita$text, options[[i]]$title$text)
options[[i]]$title <- tita   # here we set a title for each timeline step
options[[i]]$legend$data <- cns[[i]]  # fine-tune legends: data by continent
options[[i]]
})
}) |> ec.theme("thing",westeros)
htmlwidgets::saveWidget(out, "e_scatterplot.html", selfcontained = TRUE)
